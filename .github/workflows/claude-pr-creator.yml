# .github/workflows/claude-pr-creator.yml
name: Claude PR Creator
on:
  issues:
    types: [labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  claude-pr-creator:
    if: github.event.label.name == 'claude-create-pr'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: app-token
        with:
          app-id: ${{ secrets.LIAM_CODE_ASSISTANT_APP_ID }}
          private-key: ${{ secrets.LIAM_CODE_ASSISTANT_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write
          repositories: liam

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Checkout using GitHub App Token
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false

      - name: Setup pnpm
        uses: ./.github/actions/pnpm-setup

      - name: Setup Claude settings with lint hook
        run: bash .github/scripts/setup-claude.sh

      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@8b2bd6d04f7b6ac4ba5523a3a573f7843ab4b4ba # beta
        id: claude-code
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ toJSON(github.event.issue.title) }}
          ISSUE_BODY: ${{ toJSON(github.event.issue.body) }}
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: 60
          additional_permissions: |
            actions: read
          custom_instructions: |
            You have also been granted tools for editing files and running pnpm commands (fmt, install, lint, test) for testing your changes: pnpm fmt, pnpm install, pnpm lint, pnpm test.

            MANDATORY PRE-COMMIT HOOK POLICY:
            - When you see "mcp__github_file_ops__commit_files operation blocked by hook", this means lint/format errors exist
            - You MUST immediately run "pnpm lint --fix" and "pnpm fmt" to fix all errors
            - You MUST then manually fix any remaining violations shown in the error output
            - You MUST continue fixing until "pnpm lint" and "pnpm fmt" both pass completely
            - Only after ALL checks pass should you retry the commit
            - NEVER abandon the task when blocked by pre-commit hook - always fix the issues
            - Your task is NOT complete until the commit succeeds after passing all checks
            - This is a REQUIREMENT, not a suggestion - commits MUST pass all lint/format checks
          allowed_tools: |
            Bash(pnpm fmt:*),
            Bash(pnpm install),
            Bash(pnpm lint:*),
            Bash(pnpm test:*)
          direct_prompt: |
            Please implement based on Issue #${{ github.event.issue.number }}:

            Title: ${{ github.event.issue.title }}

            Content:
            ${{ github.event.issue.body }}

            Please implement with appropriate branch name and commit message.
            At the end, confirm that `pnpm lint` and `pnpm test` pass successfully in the root directory.
            Output the branch name when implementation is complete.

      - name: Create Pull Request
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ toJSON(github.event.issue.title) }}
          ISSUE_BODY: ${{ toJSON(github.event.issue.body) }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // Parse JSON-encoded environment variables
            const issueTitle = JSON.parse(process.env.ISSUE_TITLE);
            const issueBody = JSON.parse(process.env.ISSUE_BODY);

            // Get all branches for this issue
            const issueNumber = process.env.ISSUE_NUMBER;
            let allBranches = [];
            let page = 1;
            const maxPages = 10;

            while (page <= maxPages) {
              const branches = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page: page,
                protected: false
              });

              allBranches = allBranches.concat(branches.data);

              if (branches.data.length === 0) {
                break;
              }

              page++;
            }

            // Filter matching branches and get commit details
            const matchingBranches = allBranches.filter(branch =>
              branch.name.startsWith(`claude/issue-${issueNumber}`)
            );

            let claudeBranch = null;
            if (matchingBranches.length > 0) {
              const branchesWithDetails = await Promise.all(
                matchingBranches.map(async (branch) => {
                  const commit = await github.rest.repos.getCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: branch.commit.sha
                  });
                  return {
                    ...branch,
                    commitDate: new Date(commit.data.commit.committer.date)
                  };
                })
              );

              // Sort by commit date (newest first)
              branchesWithDetails.sort((a, b) => b.commitDate - a.commitDate);
              claudeBranch = branchesWithDetails[0];
            }

            if (claudeBranch) {
              console.log(`Creating PR for branch: ${claudeBranch.name}`);

              // Check if PR already exists
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${claudeBranch.name}`,
                state: 'open'
              });

              if (existingPRs.data.length > 0) {
                console.log(`PR already exists for branch: ${claudeBranch.name}`);
                return;
              }

              try {
                const pr = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Fix: ${issueTitle}`,
                  head: claudeBranch.name,
                  base: 'main',
                  draft: true,
                  body: [
                    `Closes #${process.env.ISSUE_NUMBER}`,
                    '',
                    '## Summary',
                    issueTitle,
                    '',
                    '## Implementation Details',
                    issueBody,
                    '',
                    '## Auto-generated',
                    'This PR was automatically generated by Claude Code Action.'
                  ].join('\n')
                });

                console.log(`Pull Request created: ${pr.data.html_url}`);

                // Add comment to the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: process.env.ISSUE_NUMBER,
                  body: `ü§ñ Pull Request has been automatically created: ${pr.data.html_url}`
                });
              } catch (error) {
                console.error(`Failed to create PR: ${error.message}`);

                // Add error comment to the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: process.env.ISSUE_NUMBER,
                  body: `‚ùå Failed to create Pull Request: ${error.message}`
                });
              }
            } else {
              console.log('No new branch found to create PR');

              // Add comment to the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.ISSUE_NUMBER,
                body: `‚ö†Ô∏è No branch found for issue #${process.env.ISSUE_NUMBER}. Please check if Claude Code Action completed successfully.`
              });
            }
